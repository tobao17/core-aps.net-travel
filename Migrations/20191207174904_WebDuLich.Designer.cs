// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebDuLich.Data;

namespace WebDuLich.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191207174904_WebDuLich")]
    partial class WebDuLich
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebDuLich.Models.ADMIN", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("AdminID");

                    b.ToTable("ADMINs");
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.BinhLuan", b =>
                {
                    b.Property<int>("MaBL")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaKH");

                    b.Property<int>("MaTuyenDuong");

                    b.Property<string>("NoiDung");

                    b.Property<int>("vote");

                    b.HasKey("MaBL");

                    b.HasIndex("MaKH");

                    b.HasIndex("MaTuyenDuong");

                    b.ToTable("BinhLuans");
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.ChiTietDatTour", b =>
                {
                    b.Property<int>("CTTourID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HoTen");

                    b.Property<int>("MaDat");

                    b.Property<int>("MaTour");

                    b.Property<string>("Notes");

                    b.Property<string>("SDT");

                    b.Property<int?>("SoNguoiDiTour");

                    b.Property<string>("TongTien");

                    b.HasKey("CTTourID");

                    b.HasIndex("MaDat");

                    b.HasIndex("MaTour");

                    b.ToTable("ChiTietDatTours");
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.DatTour", b =>
                {
                    b.Property<int>("MaDat")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaKH");

                    b.Property<string>("NgayDat");

                    b.HasKey("MaDat");

                    b.HasIndex("MaKH");

                    b.ToTable("DatTours");
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.KhachHang", b =>
                {
                    b.Property<int>("MaKH")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("HoTen")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("SDT")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("MaKH");

                    b.ToTable("KhachHangs");
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.LoaiTour", b =>
                {
                    b.Property<int>("MaLoai")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TenLoai");

                    b.HasKey("MaLoai");

                    b.ToTable("LoaiTours");
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.Sale", b =>
                {
                    b.Property<int>("MaKM")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mota");

                    b.Property<float>("NoiDung");

                    b.HasKey("MaKM");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.Tour", b =>
                {
                    b.Property<int>("MaTour")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GiaTour");

                    b.Property<string>("GioDi");

                    b.Property<int>("MaTuyenDuong");

                    b.Property<string>("NgayKetThuc");

                    b.Property<string>("NgayKhoiHanh");

                    b.Property<int>("SoNguoiMua");

                    b.Property<int>("SoNguoiToiDa");

                    b.HasKey("MaTour");

                    b.HasIndex("MaTuyenDuong");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.TuyenDuong", b =>
                {
                    b.Property<int>("MaTuyenDuong")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Anh");

                    b.Property<string>("DiaDiemKhoiHanh");

                    b.Property<int>("MaKM");

                    b.Property<int>("MaLoai");

                    b.Property<string>("NoiDung");

                    b.Property<int?>("SoNgay");

                    b.Property<string>("TenTuyenDuong");

                    b.HasKey("MaTuyenDuong");

                    b.HasIndex("MaKM");

                    b.HasIndex("MaLoai");

                    b.ToTable("TuyenDuongs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.BinhLuan", b =>
                {
                    b.HasOne("WebDuLich.Models.DataModel.KhachHang", "KhachHang")
                        .WithMany()
                        .HasForeignKey("MaKH")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebDuLich.Models.DataModel.TuyenDuong", "TuyenDuong")
                        .WithMany()
                        .HasForeignKey("MaTuyenDuong")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.ChiTietDatTour", b =>
                {
                    b.HasOne("WebDuLich.Models.DataModel.DatTour", "DatTour")
                        .WithMany("ChiTietDatTours")
                        .HasForeignKey("MaDat")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebDuLich.Models.DataModel.Tour", "Tour")
                        .WithMany("ChiTietDatTours")
                        .HasForeignKey("MaTour")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.DatTour", b =>
                {
                    b.HasOne("WebDuLich.Models.DataModel.KhachHang", "KhachHang")
                        .WithMany("DatTours")
                        .HasForeignKey("MaKH")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.Tour", b =>
                {
                    b.HasOne("WebDuLich.Models.DataModel.TuyenDuong", "TuyenDuong")
                        .WithMany("Tours")
                        .HasForeignKey("MaTuyenDuong")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebDuLich.Models.DataModel.TuyenDuong", b =>
                {
                    b.HasOne("WebDuLich.Models.DataModel.Sale", "Sale")
                        .WithMany("TuyenDuongs")
                        .HasForeignKey("MaKM")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebDuLich.Models.DataModel.LoaiTour", "LoaiTour")
                        .WithMany("TuyenDuongs")
                        .HasForeignKey("MaLoai")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
